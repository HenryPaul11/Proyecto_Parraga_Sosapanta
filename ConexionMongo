import com.mongodb.client.MongoClient;
import com.mongodb.MongoException;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.UpdateOneModel;
import org.bson.Document;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.swing.JOptionPane;

public class ConexionMongoDB {

    private String nameDatabase = "ViajesProyecto";//Creamos el nombre de la base de datos
    private String nameCollection = "";//Creamos el nombre de la colleccion
    private MongoClient mongoClient = null;//Creamos el cliente de la base de datos
    private MongoDatabase mongoDatabase = null;//Creamos la base de datos
    MongoCollection<Document> collection;//Creamos los documentos de la colleccion
    //CREAMOS LA CONECCION CON LA BASE DE DATOS QUE TENEMOS

    public MongoDatabase createConecction() {
        try {
            mongoClient = MongoClients.create("mongodb://localhost:27017/");
            mongoDatabase = mongoClient.getDatabase(nameDatabase);
        } catch (MongoException e) {
            e.printStackTrace();
        }
        return mongoDatabase;
    }

    public void setNameCollection(String nameCollection) {
        this.nameCollection = nameCollection;
    }

    //CREAMOS LO GETTER Y SETTER DE LOS DOCUMENTOS DE LA COLLECCION
    public MongoCollection<Document> getCollection() {
        return collection;
    }

    public void setCollection(MongoCollection<Document> collection) {
        this.collection = collection;
    }

    //AQUI EMPEZAREMOS A REALIZAR EL CRUD, EMPEZAMOS POR EL METODO DE CREAR
    public boolean createDocument(Document document) {
        try {
            mongoDatabase = createConecction();//Instanciamos la base de datos con la coneccion
            if (mongoDatabase != null) {
                MongoCollection<Document> collection = mongoDatabase.getCollection(nameCollection);
                collection.insertOne(document);//Insertamos el documento a la base de datos
            }
        } catch (MongoException e) {
            e.printStackTrace();
        }
        return false;
    }

    public List<Document> readDocument(Document document) {
        ArrayList<Document> results = new ArrayList<>();
        try {
            mongoDatabase = createConecction();
            if (mongoDatabase != null) {
                MongoCollection<Document> collectionResult = mongoDatabase.getCollection(nameCollection);
                collectionResult.find(document).into(results);
            }
            return results;
        } catch (MongoException e) {
            System.out.println("SIN DATOS");
            e.printStackTrace();
        }
        return null;
    }

    public boolean updateDocument(Document document, Document newDocument) {
        try {
            mongoDatabase = createConecction();
            if (mongoDatabase != null) {
                MongoCollection<Document> collection = mongoDatabase.getCollection(nameCollection);
                collection.updateOne(document, new Document("$set", newDocument));
            }
        } catch (MongoException e) {

        }
        return false;
    }

    public boolean deleteDocumet(Document document) {
        try {
            mongoDatabase = createConecction();
            if (mongoDatabase != null) {
                MongoCollection<Document> collection = mongoDatabase.getCollection(nameCollection);
                collection.deleteOne(document);
            }
        } catch (MongoException e) {

        }
        return false;
    }

    public List<Document> getAllDocuments() {
        List<Document> documents = new ArrayList<>();
        try {
            mongoDatabase = createConecction();
            if (mongoDatabase != null) {
                MongoCollection<Document> collection = mongoDatabase.getCollection(nameCollection);
                collection.find().into(documents);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return documents;
    }

    public List<Document> findDocuments(Document filtro) {
        List<Document> documents = new ArrayList<>();
        try {
            mongoDatabase = createConecction();
            if (mongoDatabase != null) {
                MongoCollection<Document> collection = mongoDatabase.getCollection(nameCollection);
                collection.find(filtro).into(documents);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return documents;
    }

    public List<Document> searchDocument(Document aux) {
        List<Document> documents = new ArrayList<>();
        try {
            MongoCollection<Document> collection = mongoDatabase.getCollection(nameCollection);
            for (Document doc : collection.find()) {
                documents.add(doc);
            }
        } catch (Exception e) {
            System.out.println("Error al buscar los documentos");
        }
        return documents;
    }

    public Document findDocument(Document filtro) {
        MongoCollection<Document> collection = null;
        try {
            mongoDatabase = createConecction();
            if (mongoDatabase != null) {
                collection = mongoDatabase.getCollection(nameCollection);  // Se obtiene la colección de la base de datos
                return collection.find(filtro).first();  // Encuentra el primer documento que coincida con el filtro
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;  // Si no se encuentra ningún documento, se retorna null
    }
}
