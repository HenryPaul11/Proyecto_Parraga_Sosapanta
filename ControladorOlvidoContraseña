package Controller;

import Connection.ConnectionMongo;
import Model.ModeloIniciarSesion;
import Model.ModeloOlvidoContraseña;
import View.IniciarSesion;
import View.InicioPrincipal;
import View.OlvidoContraseña;
import org.bson.Document;
import javax.swing.JOptionPane;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class ControladorOlvidoContraseña implements ActionListener {

    private OlvidoContraseña vista;
    private ModeloOlvidoContraseña modelo;
    private ConnectionMongo mongo;
    private InicioPrincipal inicioPrincipal;

    public ControladorOlvidoContraseña(OlvidoContraseña vista, ModeloOlvidoContraseña modelo) {
        this.vista = vista;
        this.modelo = modelo;
        this.mongo = new ConnectionMongo();
        this.inicioPrincipal = new InicioPrincipal();

        this.vista.BtnExit.addActionListener(this);
        this.vista.btnconfirmPassword.addActionListener(this);
    }

    public void starView() {
        vista.setVisible(true);
    }

    public void actualizarContraseña() {
        try {
            String nuevaContraseña = new String(vista.pasnewPassword.getPassword());
            String confirmarContraseña = new String(vista.pasnewPasswordC.getPassword());

            // Validaciones básicas
            if (nuevaContraseña.isEmpty() || confirmarContraseña.isEmpty()) {
                JOptionPane.showMessageDialog(vista, "Las contraseñas no pueden estar vacías", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (!nuevaContraseña.equals(confirmarContraseña)) {
                JOptionPane.showMessageDialog(vista, "Las contraseñas no coinciden", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            System.out.println(modelo.getEmail());
            // Configurar la colección
            mongo.setNameCollection("Clientes");
            // Crear el filtro para encontrar el documento por correo
            Document filtro = new Document("Correo", modelo.getEmail());
            // Crear el documento de actualización con $set
            Document actualizacion = new Document("Contraseña", nuevaContraseña);
            try {
                // Intentar actualizar el documento
                mongo.updateDocument(filtro, actualizacion);
                // Si llegamos aquí, la actualización fue exitosa
                JOptionPane.showMessageDialog(vista,
                        "¡La contraseña se ha actualizado correctamente!",
                        "Actualización Exitosa",
                        JOptionPane.INFORMATION_MESSAGE);

                // Limpiar campos
                vista.pasnewPassword.setText("");
                vista.pasnewPasswordC.setText("");

                // Cerrar ventana actual y abrir la principal
                vista.dispose();
                inicioPrincipal.setVisible(true);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(vista,
                        "Error al actualizar la contraseña: " + e.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(vista,
                    "Error inesperado: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    public void buscarEmail() {
        String email = JOptionPane.showInputDialog(vista, "Ingrese su correo:");

        if (email == null || email.trim().isEmpty()) {
            JOptionPane.showMessageDialog(vista, "El correo no puede estar vacío", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        mongo.setNameCollection("Clientes");
        Document filtro = new Document("Correo", email.trim());
        Document resultado = mongo.findDocument(filtro);

        if (resultado != null) {
            modelo.setEmail(email.trim());
            int opcion = JOptionPane.showConfirmDialog(vista,
                    "Correo encontrado. ¿Desea cambiar su contraseña?",
                    "Confirmar",
                    JOptionPane.YES_NO_OPTION);

            if (opcion == JOptionPane.YES_OPTION) {
                vista.setVisible(true);
            }
        } else {
            JOptionPane.showMessageDialog(vista, "El correo no se encontró en la base de datos", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }

    private void salir() {
        IniciarSesion vistaLogin = new IniciarSesion();
        ModeloIniciarSesion modeloLogin = new ModeloIniciarSesion();
        ControladorIniciarSesion controlLogin = new ControladorIniciarSesion(vistaLogin, modeloLogin);
        controlLogin.starView();
        vista.setVisible(false);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == vista.BtnExit) {
            salir();
        } else if (e.getSource() == vista.btnconfirmPassword) {
            actualizarContraseña();
        }
    }
}
